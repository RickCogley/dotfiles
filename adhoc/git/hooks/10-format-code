#!/bin/sh
# Code formatting hook - formats source code files
# Uses appropriate formatter based on project type

. .githooks/lib/common.sh

echo "    ðŸŽ¨ Formatting code..."
files_changed=false

# Get list of staged files to limit formatting scope
staged_files=$(git diff --cached --name-only)
if [ -z "$staged_files" ]; then
    log_info "No staged files to format"
    exit 0
fi

log_info "Staged files: $(echo $staged_files | tr '\n' ' ')"

# Format with Deno (includes TypeScript, JavaScript, Markdown, JSON)
if command -v deno >/dev/null 2>&1; then
    log_info "Formatting with deno fmt..."
    
    # Filter staged files for Deno-supported extensions
    deno_files=$(echo "$staged_files" | grep -E '\.(ts|js|tsx|jsx|md|json|jsonc)$' || true)
    
    if [ -n "$deno_files" ]; then
        # Format only the staged files
        if echo "$deno_files" | xargs deno fmt; then
            # Check if any of the staged files were modified by formatting
            for file in $deno_files; do
                if [ -f "$file" ] && ! git diff --quiet HEAD -- "$file" 2>/dev/null; then
                    files_changed=true
                    break
                fi
            done
            
            if [ "$files_changed" = true ]; then
                log_success "Staged files formatted with Deno"
            else
                log_info "Staged files already formatted"
            fi
        else
            log_error "deno fmt failed"
            exit 1
        fi
    else
        log_info "No Deno-supported files in staging area"
    fi
elif [ -f "package.json" ] && command -v prettier >/dev/null 2>&1; then
    # Fallback: Node.js project without Deno - use prettier
    log_info "Formatting with prettier..."
    
    # Filter staged files for Prettier-supported extensions
    prettier_files=$(echo "$staged_files" | grep -E '\.(js|ts|tsx|jsx|md)$' || true)
    
    if [ -n "$prettier_files" ]; then
        if echo "$prettier_files" | xargs prettier --write --print-width=120 --prose-wrap=preserve; then
            for file in $prettier_files; do
                if [ -f "$file" ] && ! git diff --quiet HEAD -- "$file" 2>/dev/null; then
                    files_changed=true
                    break
                fi
            done
            
            if [ "$files_changed" = true ]; then
                log_success "Staged files formatted with Prettier"
            fi
        fi
    else
        log_info "No Prettier-supported files in staging area"
    fi
else
    log_warn "Neither deno nor prettier found - install deno for best experience"
fi

# Format other languages based on project type
case "$(detect_project_type)" in
    "rust")
        if command -v cargo >/dev/null 2>&1; then
            log_info "Formatting Rust..."
            cargo fmt
            if files_modified '*.rs'; then
                files_changed=true
                log_success "Rust formatted"
            fi
        fi
        ;;
    "python")
        if command -v black >/dev/null 2>&1; then
            log_info "Formatting Python..."
            black .
            if files_modified '*.py'; then
                files_changed=true
                log_success "Python formatted"
            fi
        fi
        ;;
    "go")
        if command -v go >/dev/null 2>&1; then
            log_info "Formatting Go..."
            go fmt ./...
            if files_modified '*.go'; then
                files_changed=true
                log_success "Go formatted"
            fi
        fi
        ;;
esac

# Stage any changes (only for the originally staged files)
if [ "$files_changed" = true ]; then
    stage_changes "$staged_files"
fi

exit 0