{
  "includeCoAuthoredBy": false,
  "autoUpdates": true,
  "additionalDirectories": [
    "~/.claude"
  ],
  "slashCommands": [
    {
      "name": "memin",
      "description": "Load global and project memory files",
      "prompt": "Read the following memory files in order:\n1. Global memory at ~/.claude/CLAUDE.md\n2. Project memory at @CLAUDE.md (if it exists)\n\nSummarize what you've learned from these files, particularly any rules about git commits, PR descriptions, and coding standards."
    },
    {
      "name": "security-rules",
      "description": "Show DevSkim and CodeQL suppression syntax",
      "prompt": "Show me the security scanning suppression syntax rules from the global memory, specifically the DevSkim and CodeQL sections. Focus on the correct placement and syntax for each tool."
    },
    {
      "name": "preflight",
      "description": "Show preflight checks for current project",
      "prompt": "Based on the project type (check for deno.json, package.json, pyproject.toml, etc.), show me the appropriate preflight checks I should run before committing code."
    },
    {
      "name": "owasp",
      "description": "Show OWASP Top 10 security checklist",
      "prompt": "Show me the OWASP Top 10 checklist from global memory. Display each item with its title and key verification points."
    },
    {
      "name": "commit-style",
      "description": "Show conventional commit format and InfoSec guidelines",
      "prompt": "Show me the conventional commit format and InfoSec guidelines from global memory. Include examples of when to use InfoSec comments and the proper format."
    },
    {
      "name": "directory-structure",
      "description": "Show recommended project directory structure",
      "prompt": "Show me the recommended project directory structure from global memory. Include the standard directories, their purposes, and examples for different languages."
    },
    {
      "name": "checkpoint",
      "description": "Save session summary to .claude/sessions/YYYY-MM-DD.md",
      "prompt": "Create a session checkpoint by following these steps in order:\n\n1. CREATE CHECKPOINT FILE:\n   - Path: `.claude/sessions/YYYY-MM-DD.md` (use today's date)\n   - Create directory if needed: `mkdir -p .claude/sessions`\n   - Use markdown format\n\n2. CHECKPOINT CONTENT (use these exact sections):\n   # Session Checkpoint - YYYY-MM-DD\n   \n   ## Summary of Work Accomplished\n   List main tasks completed with brief descriptions\n   \n   ## Key Technical Decisions\n   Document important architectural/implementation choices and rationale\n   \n   ## Files Created/Modified\n   ### Created\n   - List new files with purpose\n   ### Modified\n   - List changed files with type of change\n   \n   ## Problems Solved\n   List issues resolved and their solutions\n   \n   ## Lessons Learned\n   Key insights or patterns discovered\n   \n   ## Next Steps\n   Potential future work or improvements\n\nIf the session file already exists, append to it instead of creating a new one. If there are no changes to be added to the session file, report that. Show progress after each step. If any step fails, report the error and continue with remaining steps."
    },
    {
      "name": "commands",
      "description": "List all available slash commands",
      "prompt": "List all available slash commands from ~/.claude/settings.json in a clear, formatted way. You can use jq to do this. Include the command name, description, and prompt for each command."
    },
    {
      "name": "addglobal",
      "description": "Add global config to project context",
      "prompt": "/project add ~/.claude/CLAUDE.md"
    }
  ],
  "permissions": {
    "allow": [
      // File operations
      "Bash(cp:*)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(ls:*)",

      // Development tools
      "Bash(npm:*)",
      "Bash(yarn:*)",
      "Bash(python:*)",
      "Bash(pip:*)",
      "Bash(docker:*)",
      "Bash(deno fmt:*)",
      "Bash(deno check:*)",
      "Bash(deno lint:*)",
      "Bash(deno test:*)",
      "Bash(deno task:*)",
      "Bash(deno run:*)",
      "Bash(deno bundle:*)",
      "Bash(deno install:*)",
      "Bash(deno doc:*)",
      "Bash(deno eval:*)",
      "Bash(deno cache:*)",

      // Git operations
      "Bash(git tag:*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(git stash:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr checkout:*)",
      "Bash(gh pr merge:*)",
      "Bash(gh pr comment:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(gh issue create:*)",
      "Bash(gh issue comment:*)",
      "Bash(gh repo view:*)",
      "Bash(gh api:*)",
      "Bash(gh release edit:*)",
      "Bash(gh release view:*)",
      "Bash(gh release list:*)",

      // Text processing
      "Bash(awk:*)",
      "Bash(sed:*)",
      "Bash(grep:*)",
      "Bash(head:*)",
      "Bash(tail:*)",
      "Bash(wc:*)",
      "Bash(cat:*)",
      "Bash(sort:*)",
      "Bash(diff:*)",
      "Bash(find:*)",
      "Bash(xargs:*)",
      "Bash(tr:*)",
      "Bash(uniq:*)",
      "Bash(jq:*)",

      // System info
      "Bash(ps:*)",
      "Bash(which:*)",
      "Bash(pwd:*)",
      "Bash(echo:*)",
      "Bash(where:*)",

      // More web domains
      "WebFetch(domain:*.github.io)",
      "WebFetch(domain:docs.deno.com)",
      "WebFetch(domain:developer.mozilla.org)",
      "WebFetch(domain:www.contributor-covenant.org)",
      "WebFetch(domain:docs.anthropic.com)"
    ],
    "deny": [
      // Examples of what you might want to block
      "Bash(rm -rf:*)",  // Prevent accidental deletions
      "Bash(sudo:*)",    // Require manual elevation
      "Bash(killall:*)"  // Prevent process termination
    ]
  },
  "globalMemory": {
    "path": "~/.claude/CLAUDE.md",
    "format": "markdown"
  },
  "hooks": {
    "onSessionStart": [
      {
        "name": "Load Global Config",
        "command": "echo 'Be sure to read the global configuration file at ~/.claude/CLAUDE.md to understand the coding standards and conventions for this and any session.'",
        "description": "Prompts Claude to load global configuration at session start"
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "message",
            "message": "ðŸª´ Aichaku MCP Review Required:\n\n1. For TypeScript/JavaScript files (.ts, .js):\n   - Use: mcp__aichaku-reviewer__review_file\n   - Run: deno fmt --check <file>\n   - Run: deno lint <file>\n   - Run: deno check <file>\n\n2. For Markdown files (.md):\n   - Run: aichaku docs-lint <file>\n   - Check standards with: aichaku docs-standard\n\n3. For methodology compliance:\n   - Use: mcp__aichaku-reviewer__review_methodology\n\n4. For any file:\n   - Use: mcp__aichaku-reviewer__review_file with the file path\n   - This checks security patterns, standards compliance, and provides Claude-specific guidance"
          }
        ]
      }
    ]
  }
}
